SELECT * FROM ORDER_ITEMS;
SELECT * FROM PRODUCTS;
SELECT * FROM ORDERS;
SELECT * FROM PAYMENTS;
SELECT * FROM CATEGORY;
SELECT * FROM CUSTOMERS;
SELECT * FROM SHIPPING;
SELECT * FROM SELLERS;
SELECT * FROM INVENTORY;

/*
1. Top Selling Products
Query the top 10 products by total sales value.
Challenge: Include product name, total quantity sold, and total sales value.
*/

SELECT ORDER_ITEMS.PRODUCT_ID,
	PRODUCTS.PRODUCT_NAME,
	COUNT(ORDER_ITEMS.ORDER_ID) AS TOTAL_ORDERS,
	SUM(TOTAL_SALES) AS TOTAL_SALES
FROM ORDER_ITEMS
JOIN PRODUCTS ON ORDER_ITEMS.PRODUCT_ID = PRODUCTS.PRODUCT_ID
GROUP BY ORDER_ITEMS.PRODUCT_ID,
	PRODUCTS.PRODUCT_NAME
ORDER BY TOTAL_SALES DESC 
LIMIT 10;


/*
2. Revenue by Category
Calculate total revenue generated by each product category.
Challenge: Include the percentage contribution of each category to total revenue.
*/

SELECT C.CATEGORY_ID,
	C.CATEGORY_NAME,
	SUM(TOTAL_SALES) AS TOTAL_REVENUE,
	(SUM(TOTAL_SALES) /
			(SELECT SUM(TOTAL_SALES)
				FROM ORDER_ITEMS AS O)) * 100 AS PERCENTAGE_CONTRIBUTION
FROM ORDER_ITEMS AS O
JOIN PRODUCTS AS N ON O.PRODUCT_ID = N.PRODUCT_ID
JOIN CATEGORY AS C ON N.CATEGORY_ID = C.CATEGORY_ID
GROUP BY C.CATEGORY_ID, C.CATEGORY_NAME
ORDER BY TOTAL_REVENUE DESC


/*
3. Average Order Value (AOV)
Compute the average order value for each customer.
Challenge: Include only customers with more than 1 orders.
*/

SELECT C.CUSTOMER_ID,
	CONCAT(C.F_NAME,' ', C.L_NAME) AS CUSTOMER,
	SUM(TOTAL_SALES) / COUNT(O.ORDER_ID) AS AVG_ORDER_VALUE
FROM ORDER_ITEMS AS OI
JOIN ORDERS AS O ON OI.ORDER_ID = O.ORDER_ID
JOIN CUSTOMERS AS C ON C.CUSTOMER_ID = O.CUSTOMER_ID
GROUP BY 1,2
HAVING COUNT(O.ORDER_ID) > 1
ORDER BY AVG_ORDER_VALUE DESC


/*
4. Monthly Sales Trend
Query monthly total sales over the past year.
Challenge: Display the sales trend, grouping by month, return current_month sale, last month sale!
*/

SELECT 
      YEAR, MONTH, TOTAL_SALE AS CURRENT_MONTH_SALES,
	  LAG(TOTAL_SALE,1) OVER() AS PREVIOUS_MONTH_SALES
FROM
(SELECT 
      EXTRACT(MONTH FROM ORDERS.ORDER_DATE) AS MONTH,
	  EXTRACT(YEAR FROM ORDERS.ORDER_DATE)AS YEAR,
	  ROUND(SUM(ORDER_ITEMS.TOTAL_SALES)::NUMERIC,2) AS TOTAL_SALE
FROM ORDERS 
JOIN
ORDER_ITEMS 
ON ORDERS.ORDER_ID = ORDER_ITEMS.ORDER_ID
WHERE ORDERS.ORDER_DATE>=CURRENT_DATE - INTERVAL '1 YEAR'
GROUP BY 2,1
ORDER BY 2,1 
) AS T1

/*
5. Customers with No Purchases
Find customers who have registered but never placed an order.
Challenge: List customer details and the time since their registration.
*/

-- Approach 1
SELECT *
FROM CUSTOMERS
WHERE CUSTOMER_ID NOT IN
		(SELECT DISTINCT(CUSTOMER_ID)
			FROM ORDERS)
			
-- Approach 2
SELECT *
FROM CUSTOMERS AS C
LEFT JOIN ORDERS AS O ON C.CUSTOMER_ID = O.CUSTOMER_ID
WHERE O.CUSTOMER_ID IS NULL


/*
6. Least-Selling Categories by State
Identify the least-selling product category for each state.
Challenge: Include the total sales for that category within each state.
*/

WITH RANKING AS
(SELECT 
      CUSTOMERS.STATE,
	  CATEGORY.CATEGORY_NAME,
	  SUM(ORDER_ITEMS.TOTAL_SALES) AS TOTAL_SALE,
	  DENSE_RANK() OVER(PARTITION BY CUSTOMERS.STATE ORDER BY SUM(ORDER_ITEMS.TOTAL_SALES)) AS RANK
FROM ORDERS 
JOIN 
CUSTOMERS 
ON ORDERS.CUSTOMER_ID = CUSTOMERS.CUSTOMER_ID
JOIN
ORDER_ITEMS 
ON ORDER_ITEMS.ORDER_ID = ORDERS.ORDER_ID
JOIN
PRODUCTS 
ON PRODUCTS.PRODUCT_ID = ORDER_ITEMS.PRODUCT_ID
JOIN
CATEGORY
ON CATEGORY.CATEGORY_ID = PRODUCTS.CATEGORY_ID
GROUP BY 1,2
)

SELECT *
FROM RANKING
WHERE RANK=1


/*
7. Customer Lifetime Value (CLTV)
Calculate the total value of orders placed by each customer over their lifetime.
Challenge: Rank customers based on their CLTV.
*/

SELECT 
      CUSTOMERS.CUSTOMER_ID, CONCAT(CUSTOMERS.F_NAME,' ',CUSTOMERS.L_NAME) AS FULL_NAME,
	  ROUND(SUM(TOTAL_SALES)::NUMERIC,2) AS TOTAL_AMOUNT_SPENT,
	  DENSE_RANK() OVER(ORDER BY SUM(TOTAL_SALES) DESC) AS RANK
FROM CUSTOMERS 
JOIN
ORDERS 
ON ORDERS.CUSTOMER_ID = CUSTOMERS.CUSTOMER_ID
JOIN
ORDER_ITEMS 
ON ORDER_ITEMS.ORDER_ID = ORDERS.ORDER_ID
GROUP BY 1,2


/*
8. Inventory Stock Alerts
Query products with stock levels below a certain threshold (e.g., less than 10 units).
Challenge: Include last restock date and warehouse information.
*/

SELECT 
      INVENTORY.*,
      PRODUCTS.PRODUCT_NAME
FROM PRODUCTS 
JOIN
INVENTORY 
ON INVENTORY.PRODUCT_ID = PRODUCTS.PRODUCT_ID
WHERE INVENTORY.STOCK < 10;


/*
9. Shipping Delays
Identify orders where the shipping date is later than 3 days after the order date.
Challenge: Include customer, order details, and delivery provider.
*/

SELECT 
     O.*,
	 S.SHIPPING_PROVIDERS AS DELIVERY_PROVIDER,
	 CONCAT(CUSTOMERS.F_NAME,' ',CUSTOMERS.L_NAME) AS FULL_NAME,
	 S.SHIPPING_DATE - O.ORDER_DATE AS DAYS_TOOK_TO_SHIP
FROM ORDERS AS O
JOIN
SHIPPING AS S
ON O.ORDER_ID = S.ORDER_ID
JOIN
CUSTOMERS 
ON CUSTOMERS.CUSTOMER_ID = O.CUSTOMER_ID
WHERE S.SHIPPING_DATE - O.ORDER_DATE >3;


/*
10. Payment Success Rate 
Calculate the percentage of successful payments across all orders.
Challenge: Include breakdowns by payment status (e.g., failed, pending).
*/

SELECT 
      P.PAYMENT_STATUS,
	  COUNT(*) AS TOTAL_PAYMENTS,
	  COUNT(*)/(SELECT COUNT(*) FROM PAYMENTS)::NUMERIC*100 AS PAYMENTS_PERCENTAGE
FROM ORDERS AS O
JOIN 
PAYMENTS AS P
ON O.ORDER_ID=P.ORDER_ID
GROUP BY 1


/*
11. Top Performing Sellers
Find the top 5 sellers based on total sales value.
Challenge: Include both successful and failed orders, and display their percentage of successful orders.
*/

WITH TOP_SELLERS AS
(SELECT 
      S.SELLER_ID,
	  S.SELLER_NAME,
	  SUM(OI.TOTAL_SALES) AS TOTAL_SALE
FROM SELLERS AS S
JOIN
ORDERS AS O
ON O.SELLER_ID=S.SELLER_ID
JOIN 
ORDER_ITEMS AS OI
ON OI.ORDER_ID=O.ORDER_ID
GROUP BY 1,2
ORDER BY TOTAL_SALE DESC
LIMIT 5),

SELLER_REPORTS
AS 
(SELECT 
     O.SELLER_ID,
	 TS.SELLER_NAME,
	 O.ORDER_STATUS,
	 COUNT(*) AS TOTAL_ORDERS
FROM ORDERS AS O
JOIN
TOP_SELLERS AS TS
ON O.SELLER_ID=TS.SELLER_ID
WHERE O.ORDER_STATUS NOT IN ('INPROGRESS','RETURNED')
GROUP BY 1,2,3
)

SELECT 
      SELLER_ID,
	  SELLER_NAME,
	  SUM(CASE WHEN ORDER_STATUS='COMPLETED' THEN TOTAL_ORDERS ELSE 0 END) AS TOTAL_COMPLETED_ORDERS,
	  SUM(CASE WHEN ORDER_STATUS='CANCELLED' THEN TOTAL_ORDERS ELSE 0 END )AS TOTAL_CANCELLED_ORDERS,
	  SUM(TOTAL_ORDERS) AS TOTAL_ORDERS,
	  SUM(CASE WHEN ORDER_STATUS='COMPLETED' THEN TOTAL_ORDERS ELSE 0 END)::NUMERIC/
	  SUM(TOTAL_ORDERS)::NUMERIC*100 AS SUCESSFUL_ORDERS_PERCENTAGE
FROM SELLER_REPORTS
GROUP BY 1,2


/*
12. Product Profit Margin
Calculate the profit margin for each product (difference between price and cost of goods sold).
Challenge: Rank products by their profit margin, showing highest to lowest.
*/

SELECT 
     PRODUCT_ID,
	 PRODUCT_NAME,
	 PROFIT_MARGIN,
	 DENSE_RANK() OVER(ORDER BY PROFIT_MARGIN DESC) AS PRODUCT_RANK
FROM
(SELECT 
      P.PRODUCT_ID,
	  P.PRODUCT_NAME,
	  SUM(OI.TOTAL_SALES-(P.COGS*OI.QUANTITY))/SUM(OI.TOTAL_SALES)*100 AS PROFIT_MARGIN
FROM ORDER_ITEMS AS OI
JOIN
PRODUCTS AS P
ON P.PRODUCT_ID = OI.PRODUCT_ID
GROUP BY 1,2) AS T1


/*
13. Most Returned Products
Query the top 10 products by the number of returns.
Challenge: Display the return rate as a percentage of total units sold for each product.
*/

SELECT 
       P.PRODUCT_ID,
	   P.PRODUCT_NAME,
	   COUNT(*) AS TOTAL_UNITS_SOLD,
	   SUM(CASE WHEN O.ORDER_STATUS='RETURNED' THEN 1 ELSE 0 END) AS TOTAL_RETURNED,
	   SUM(CASE WHEN O.ORDER_STATUS='RETURNED' THEN 1 ELSE 0 END)::NUMERIC/COUNT(*)*100::NUMERIC AS RETURNED_PERCENTAGE
FROM ORDER_ITEMS AS OI
JOIN
PRODUCTS AS P
ON OI.PRODUCT_ID = P.PRODUCT_ID
JOIN
ORDERS AS O
ON O.ORDER_ID = OI.ORDER_ID
GROUP BY 1,2
ORDER BY 4 DESC
LIMIT 10;


/*
14. Orders Pending Shipment
Find orders that have been paid but are still pending shipment.
Challenge: Include order details, payment date, and customer information.
*/

SELECT 
      CONCAT(C.F_NAME,' ',C.L_NAME) AS FULL_NAME,
      O.ORDER_ID,
	  O.ORDER_STATUS,
	  P.PAYMENT_DATE,
	  P.PAYMENT_STATUS
FROM ORDERS AS O
JOIN
PAYMENTS AS P
ON P.ORDER_ID = O.ORDER_ID
JOIN
CUSTOMERS AS C
ON C.CUSTOMER_ID = O.CUSTOMER_ID
WHERE 
P.PAYMENT_STATUS='PAID'
AND O.ORDER_STATUS='PENDING'


/*
15. Inactive Sellers
Identify sellers who havenâ€™t made any sales in the last 6 months.
Challenge: Show the last sale date and total sales from those sellers.
*/

WITH IAS 
AS
(SELECT * FROM SELLERS
WHERE SELLER_ID NOT IN (SELECT SELLER_ID FROM ORDERS WHERE ORDER_DATE >= CURRENT_DATE - INTERVAL '6 MONTH')
)

SELECT 
      O.SELLER_ID,
      MAX(O.ORDER_DATE) AS LAST_SALE_DATE,
      MAX(OI.TOTAL_SALES) AS LAST_SALE_AMOUNT
FROM ORDERS AS O
JOIN 
IAS
ON IAS.SELLER_ID = O.SELLER_ID
JOIN ORDER_ITEMS AS OI
ON O.ORDER_ID = OI.ORDER_ID
GROUP BY 1


/*
16. IDENTITY customers into returning or new
if the customer has done more than 5 return categorize them as returning otherwise new
Challenge: List customers id, name, total orders, total returns
*/

SELECT 
      CUSTOMER_ID,
      C_FULL_NAME AS CUSTOMERS,
      TOTAL_ORDERS,
      TOTAL_RETURN,
CASE
	WHEN TOTAL_RETURN > 5 THEN 'RETURNING_CUSTOMERS' ELSE 'NEW'
END AS CX_CATEGORY
FROM
(SELECT 
     C.CUSTOMER_ID,
	 CONCAT(C.F_NAME, ' ', C.L_NAME) AS C_FULL_NAME,
	 COUNT(O.ORDER_ID) AS TOTAL_ORDERS,
	 SUM(CASE WHEN O.ORDER_STATUS = 'RETURNED' THEN 1 ELSE 0 END) AS TOTAL_RETURN	
FROM ORDERS AS O
JOIN 
CUSTOMERS AS C
ON C.CUSTOMER_ID = O.CUSTOMER_ID
JOIN
ORDER_ITEMS AS OI
ON OI.ORDER_ID = O.ORDER_ID
GROUP BY 1,2
 )
 
 
/*
17. Top 5 Customers by Orders in Each State
Identify the top 5 customers with the highest number of orders for each state.
Challenge: Include the number of orders and total sales for each customer.
*/

SELECT * FROM 
(SELECT 
	C.STATE,
	CONCAT(C.F_NAME, ' ', C.L_NAME) AS CUSTOMERS,
	COUNT(O.ORDER_ID) AS TOTAL_ORDERS,
	SUM(OI.TOTAL_SALES) AS TOTAL_SALE,
	DENSE_RANK() OVER(PARTITION BY C.STATE ORDER BY COUNT(O.ORDER_ID) DESC) AS RANK
FROM ORDERS AS O
JOIN 
ORDER_ITEMS AS OI
ON OI.ORDER_ID = O.ORDER_ID
JOIN 
CUSTOMERS AS C
ON 
C.CUSTOMER_ID = O.CUSTOMER_ID
GROUP BY 1, 2
) AS T1
WHERE RANK <=5


/*
18. Revenue by Shipping Provider
Calculate the total revenue handled by each shipping provider.
Challenge: Include the total number of orders handled and the average delivery time for each provider.
*/

SELECT 
	S.SHIPPING_PROVIDERS,
	COUNT(O.ORDER_ID) AS ORDER_HANDLED,
	SUM(OI.TOTAL_SALES) AS TOTAL_SALE,
	COALESCE(AVG(S.RETURN_DATE - S.SHIPPING_DATE), 0) AS AVERAGE_DAYS
FROM ORDERS AS O
JOIN 
ORDER_ITEMS AS OI
ON OI.ORDER_ID = O.ORDER_ID
JOIN 
SHIPPING AS S
ON 
S.ORDER_ID = O.ORDER_ID
GROUP BY 1


/*
19. Top 10 product with highest decreasing revenue ratio compare to last year(2022) and current_year(2023)
Challenge: Return product_id, product_name, category_name, 2022 revenue and 2023 revenue decrease ratio at end Round the result

Note: Decrease ratio = cr-ls/ls* 100 (cs = current_year ls=last_year)
*/

WITH LAST_YEAR_SALE AS
(SELECT 
      P.PRODUCT_ID,
	  P.PRODUCT_NAME,
	  SUM(OI.TOTAL_SALES) AS REVENUE
FROM ORDERS AS O
JOIN
ORDER_ITEMS AS OI
ON O.ORDER_ID = OI.ORDER_ID
JOIN
PRODUCTS AS P
ON P.PRODUCT_ID=OI.PRODUCT_ID
WHERE EXTRACT (YEAR FROM O.ORDER_DATE)=2022
GROUP BY 1,2),

CURRENT_YEAR_SALE AS
(SELECT 
      P.PRODUCT_ID,
	  P.PRODUCT_NAME,
	  SUM(OI.TOTAL_SALES) AS REVENUE
FROM ORDERS AS O
JOIN
ORDER_ITEMS AS OI
ON O.ORDER_ID = OI.ORDER_ID
JOIN
PRODUCTS AS P
ON P.PRODUCT_ID=OI.PRODUCT_ID
WHERE EXTRACT (YEAR FROM O.ORDER_DATE)=2023
GROUP BY 1,2)

SELECT 
      LS.PRODUCT_ID,
	  LS.PRODUCT_NAME,
	  LS.REVENUE AS LAST_YEAR_REVENUE,
	  CS.REVENUE AS CURRENT_YEAR_REVENUE,
	  LS.REVENUE-CS.REVENUE AS REVENUE_DIFF,
	  ROUND((CS.REVENUE-LS.REVENUE)::NUMERIC/LS.REVENUE::NUMERIC *100,2) AS REVENUE_DECR_RATIO
FROM
LAST_YEAR_SALE AS LS
JOIN
CURRENT_YEAR_SALE AS CS
ON LS.PRODUCT_ID=CS.PRODUCT_ID
WHERE LS.REVENUE>CS.REVENUE
ORDER BY 6 DESC


/*
STORE PROCEDURE

create a function in which as soon as the product is sold the the same quantity should be reduced from inventory table
after adding any sales records it should update the stock in the inventory table based on the product and qty purchased
-- 
*/

CREATE OR REPLACE PROCEDURE ADD_SALES
(
P_ORDER_ID INT,
P_CUSTOMER_ID INT,
P_SELLER_ID INT,
P_ORDER_ITEM_ID INT,
P_PRODUCT_ID INT,
P_QUANTITY INT
)
LANGUAGE PLPGSQL
AS $$

DECLARE 
-- ALL VARIABLE
V_COUNT INT;
V_PRICE FLOAT;
V_PRODUCT VARCHAR(50);

BEGIN
-- FETCHING PRODUCT NAME AND PRICE BASED P ID ENTERED
	SELECT 
		PRICE, PRODUCT_NAME
		INTO
		V_PRICE, V_PRODUCT
	FROM PRODUCTS
	WHERE PRODUCT_ID = P_PRODUCT_ID;
	
-- CHECKING STOCK AND PRODUCT AVAILABILITY IN INVENTORY	
	SELECT 
		COUNT(*) 
		INTO
		V_COUNT
	FROM INVENTORY
	WHERE 
		PRODUCT_ID = P_PRODUCT_ID
		AND 
		STOCK >= P_QUANTITY;
		
	IF V_COUNT > 0 THEN
	-- ADD INTO ORDERS AND ORDER_ITEMS TABLE
	-- UPDATE INVENTORY
		INSERT INTO ORDERS(ORDER_ID, ORDER_DATE, CUSTOMER_ID, SELLER_ID)
		VALUES
		(P_ORDER_ID, CURRENT_DATE, P_CUSTOMER_ID, P_SELLER_ID);

		-- ADDING INTO ORDER LIST
		INSERT INTO ORDER_ITEMS(ORDER_ITEM_ID, ORDER_ID, PRODUCT_ID, QUANTITY, PRICE_PER_UNIT, TOTAL_SALES)
		VALUES
		(P_ORDER_ITEM_ID, P_ORDER_ID, P_PRODUCT_ID, P_QUANTITY, V_PRICE, V_PRICE*P_QUANTITY);

		--UPDATING INVENTORY
		UPDATE INVENTORY
		SET STOCK = STOCK - P_QUANTITY
		WHERE PRODUCT_ID = P_PRODUCT_ID;
		
		RAISE NOTICE 'THANK YOU PRODUCT: % SALE HAS BEEN ADDED ALSO INVENTORY STOCK UPDATES',V_PRODUCT; 

	ELSE
		RAISE NOTICE 'THANK YOU FOR FOR YOUR INFO THE PRODUCT: % IS NOT AVAILABLE', V_PRODUCT;

	END IF;

END;
$$

SELECT COUNT(*) 
FROM INVENTORY
WHERE 
	PRODUCT_ID = 1
	AND 
	STOCK >= 56


CALL ADD_SALES
(
25006, 2, 5, 25005, 1, 14
);
